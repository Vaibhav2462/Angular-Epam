var complexFunction = function(arg1, arg2) { /* complex calculation in here */ };
var cachedFunction = cache(complexFunction);

cachedFunction('foo', 'bar'); // complex function should be executed
cachedFunction('foo', 'bar'); // complex function should not be invoked again, instead the cached result should be returned
cachedFunction('foo', 'baz'); // should be executed, because the method wasn't invoked before with these arguments



Solution:-
function cache(func) {
  // do your magic here
  var cachedFunc = {};
  return function() {
    var key = JSON.stringify(arguments);
    var isComputed = cachedFunc.hasOwnProperty(key);

    if (isComputed) {
      return cachedFunc[key];
    } else {
      cachedFunc[key] = func.apply(null, arguments);
      return cachedFunc[key];
    }
  };
}